# 202107 수업

- 자바스크립트 -> 타입 -> 노드js -> js텐서플로 -> 파이토치 ->영상처리, 자연어 처리 ->프로젝트

## why javascript?
- big 3 lang
- 자스(프론트,하이브리드), 파이썬(ai), 자바(백엔드) 

- 자스 기반 텐서플로: 웹서비스 + 모바일

## why Node.js?
- 자바스크립트는 프론트엔드 전용 (브라우저에서만 실행가능)
- 서버는 기존의 웹구조를 사용했었음.
- -> 스탠드 얼론(+서버) 실행 가능한 자바스크립트의 등장
- 자바스크립트만으로 서버+클라이언트 구성가능.

## why OOP
- 객체지향
- 캡슐화/코드재사용을 주요 특징으로 함
- 배우기 어렵지만 활용성이 높음

- 자바스크립트는 객체지향기술이 아님
- MS가 자바스크립트의 객체지향버전인 Typescript 발표

## why PyTorch 
- 최근에는 파이썬 기반 텐서플로 외에도 파이토치 활용이 많아지는 추세임.
- 텐서플로1 -> 텐서플로2 + 파이토치. (텐서플로우 1에서 2로 갈 때, 파이토치로 간 사람이 있었음)

### 영상처리 
- cnn 
- image segmentation

### 자연어처리
- 자연어처리 기초 
- 한글처리
- 언어모델
- 심화 

## 왜 자바스크립트가 이슈인가?
### 웹 서비스 아키텍처(stage1)
- html(내용)+http(전송)
- 웹 서버에서 파일을 읽어옴
- 정적 : 저장된 파일을 보냄
- 동적 : 클라이언트에서 입력을 전송해 프로그램을 실행하여 나온 결과를 보냄
         : 주로 dbms의 내용을 조회해서 html을 생성
- 클라이언트는 전송받은 파일을 해석(parsing)해서 결과를 표시(rendering)함
- html이 주, 자바스크립트는 보조 -> html(기본내용)+javascript(추가내용)
- 동기식(Synchronous)

ex) pc용 페이지 / 모바일 페이지 -> multi-view (MVC) ->뷰만 다르게 생성할 수 있음. 

### 웹서비스 아키텍쳐(stage2)
- 내용만 줄테니 -> 페이지 직접 만들어
- AJAX(화면 부분업테이트) / Web 2.0
- JSON(내용) + HTTP (전송)
- 웹 서버는 html대신 json으로 된 문서를 보냄
- 클라이언트는 전송받은 파일을 해석해서 결과를 표시함
- ->자바스크립트가 주, html이 보조
- 내용을 가공해서 표시할 수 있음
- -> 주로 DOM 사용
- 비동기(Asynchronous)
- -> 부분 업데이트 허용 

### 웹서비스 아키텍쳐(stage3)
- JSON(내용) + HTTP( 전송)
- 양방향통신(Bi-directional)
- 웹소켓
-실시간(Real-time) API (예전엔 네이티브 앱으로만 가능했던 실시간 표현이 자스로 가능해짐)
- node.js 활용
ex) VSCode(javascript+electorn.js)

## 자바스크립트
- 넷스케이프가 처음으로 만듬
- Livescript > Javascript 
- 파편화/단편화(fragmentatino) (넷스케이프vsMS)
- 브라우저 간의 지원 수준이 모두 다름
- IE의 Jscript
- -> 그래서 jQuery.js - 브라우저 간의 독립성 제공 -> 웹표준
- HTML5 = HTML5 + CSS3 + ECMAscript(javascript) + SVG(2D) + WebGl(3D)
- 웹 표준 지켜 -> 표준자바스크립트(ES) 
- --> Livescript -> Javascript/Jscript -> jQuery -> ES(ECMAscrip)(현재)

## 자바스크립트 프레임워크
1. Angular.js(google) -> OOP(typescript)+DI
2. React.js(Facebook) -> 
3. Vue.js

- 하이브리드앱용 프레임워크
- React Native (안드가 더 잘됨)
- Flutter (Dart->ios가 더 잘됨)

- 자바스크립트는 브라우저에서만 실행 -> 서버나 스탠드얼론 타입으로 Node.js
- **비동기** 실행을 특징으로 함
- 다른 언어에서는 찾아보기 힘든 특징 
- -> 기존 언어 : 호출하면 메인코드는 정지(block)되고 함수로 제어권 이동 (어느 한 순간 실행하는 곳이 한 군데))
       자바스크립트 : 호출하면 정지하지 않고 계속 실행 -> 스레드와 비슷
- -> 일반적 
	1.소스코드를 읽어라 2. 코드를 실행하라
- -> 자스 (비동기) 
	1. 소스 코드를 읽는 도중에 코드를 실행(에러/정상실행)
	2. HTML안에 javascrip는 가급적으로 파일의 마지막에 위치시켜라(가이드라인)
